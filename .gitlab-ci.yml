# list of stages
stages:

# list of environment for CI
  # - deploy 
  - build
  - package
  - deploy

before_script:
  - |
    if [ $CI_COMMIT_REF_SLUG == "dev" ]
    then
    	export STAGE=dev
    elif [ $CI_COMMIT_REF_SLUG == "add-backend-files" ] || [ $CI_COMMIT_REF_SLUG == "node-react" ] || [ $CI_COMMIT_REF_SLUG == "v3-master" ]
    then
    	export STAGE=dev
    elif [ $CI_COMMIT_REF_SLUG == "master" ]
    then
    	export STAGE=prod
    else
    	echo "Undefine stage"
    fi

# list of tasks
cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
  - api/node_modules/ 
  - app/node_modules/ 

api-build:
  image: 'node:8.14.0-alpine'
  artifacts:
    name: "$CI_JOB_NAME-$CI_COMMIT_REF_NAME"
    paths:
    - api/dist/
    - api/node_modules/
    expire_in: 1 week
  stage: build
  tags:
    - docker
  script:
    - echo "Building artifact"
    - cd api
    - npm install
    - npm run build
    - ls -al
   
  only:
    - test
    - node-react
    - add-backend-files
    - v3-master
    - master

app-build:
  image: 'node:8.14.0-alpine'
  artifacts:
    name: "$CI_JOB_NAME-$CI_COMMIT_REF_NAME"
    paths:
    - app/build/    
    expire_in: 1 week
  stage: build
  tags:
    - docker
  script:
    - echo "Building artifact"
    - cd devops
    - ./compile_env.sh
    - cd ../
    - cd app    
    - npm install
    - npm run build

  only:
    - test
    - node-react
    - add-backend-files
    - v3-master
    - master

pakage-app:
  stage: package
  services:
    - docker:18-dind
  image: docker:latest
  tags:
    - docker
  script:    
    - docker login -u "$REGISTRY_USER" -p "$REGISTRY_PASSWORD" $REGISTRY_URL
    - docker build --pull -t $REGISTRY_URL/bulletin-app:latest -f ./devops/App.Dockerfile .
    - docker push $REGISTRY_URL/bulletin-app:latest

  dependencies:
    - app-build
  only:
    - test
    - node-react
    - add-backend-files
    - v3-master
    - master

pakage-api:
  stage: package
  services:
    - docker:18-dind
  image: docker:latest
  tags:
    - docker
  script:
    - docker login -u "$REGISTRY_USER" -p "$REGISTRY_PASSWORD" $REGISTRY_URL
    - docker build --pull -t $REGISTRY_URL/bulletin-api:latest -f ./devops/Api.Dockerfile .
    - docker push $REGISTRY_URL/bulletin-api:latest
    
  dependencies:
    - api-build
  only:
    - test
    - node-react
    - add-backend-files
    - v3-master
    - master

deploy-to-dev:
  stage: deploy
  image: pravashupreti/fabric-deploy
  tags:
    - docker
  script:
    - echo "Deploying to Developer environment"
    - cd devops
    # Prepare
    - export TAG=latest
    - export APP_PORT=5504
    - export API_PORT=5503
    - fab makeWorkdir
    - fab updateImage
    - fab compileConfig    
    
    # deploy
    - fab stopServer    
    - fab uploadConfig    
    - fab deploy
    

  only:
    - node-react
    - v3-master
    - add-backend-files

deploy-to-production:
  stage: deploy
  tags:
    - docker
  script:
    - echo "Deploying to Production environment"
  when: manual
  only:
    - tags
    
